import java.nio.file.Files
import java.nio.file.StandardOpenOption

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version "8.1.1"
}

repositories {
    mavenCentral()
}

group = 'de.featjar'
version = '1.0'

dependencies {
    implementation 'net.tascalate:net.tascalate.concurrent:0.9.6'
    implementation 'org.ow2.sat4j:org.ow2.sat4j.core:2.3.6'
}

application {
    mainClass = 'de.featjar.base.FeatJAR'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'de.featjar.base.FeatJAR'
        )
        archiveBaseName = 'rp-evaluation-coverage-metrics'
    }
}

shadowJar {
    archiveBaseName.set('rp-evaluation-coverage-metrics-all')
    archiveClassifier.set('')
    archiveVersion.set('1.0')
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        vendor = JvmVendorSpec.ORACLE
    }
    sourceCompatibility = 1.11
}

task setupModels(type: Copy) {
    onlyIf{ !file('models').exists() }
    from zipTree('models.zip')
    into projectDir
    eachFile {
        if (it.relativePath.getFile(destinationDir).exists()) {
            it.exclude()
        }
    }
}

task combineZipParts {
    description = 'Combines ZIP parts into one complete ZIP file'
    doLast {
        def partFiles = fileTree('results/2024-09-25_11-29-30/data/data-2024-09-26_10-55-02/').matching {
            include 'part_*'
        }.files.sort()

        def outputFile = file('results/2024-09-25_11-29-30/data/data-2024-09-26_10-55-02/partial_coverage.zip')

        outputFile.withOutputStream { outStream ->
            partFiles.each { file ->
                outStream << file.bytes
            }
        }
    }
}

task unzipCombinedFile(type: Copy) {
    description = 'Unzips the combined ZIP file'
    dependsOn combineZipParts
    from zipTree('results/2024-09-25_11-29-30/data/data-2024-09-26_10-55-02/partial_coverage.zip')
    into 'results/2024-09-25_11-29-30/data/data-2024-09-26_10-55-02/'
}

task deletePartFiles {
    description = 'Deletes ZIP part files and combined ZIP file after unzipping'
    dependsOn unzipCombinedFile
    doLast {
        // Delete part files
        def partFiles = fileTree('results/2024-09-25_11-29-30/data/data-2024-09-26_10-55-02/').matching {
            include 'part_*'
        }.files

        partFiles.each { file ->
            file.delete()
        }

        // Delete the combined ZIP file
        def combinedZip = file('results/2024-09-25_11-29-30/data/data-2024-09-26_10-55-02/partial_coverage.zip')
        if (combinedZip.exists()) {
            combinedZip.delete()
        }
    }
}

assemble.finalizedBy setupModels